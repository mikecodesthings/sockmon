#!/usr/bin/python
import sys
import time
import fcntl
import curses
import struct
import signal
import termios
import operator
import threading
from copy import deepcopy
from optparse import OptionParser, OptionGroup

#scapy includes
import scapy.config
scapy.config.conf.ipv6_enabled = False
from scapy.all import *

kill_event = None

class Display_Screen():
	def __init__(self, height, width, threshold):
		self.width = width
		self.height = height
		self.ingress_window = None
		self.ingress_window_x = 0
		self.ingress_window_y = 0
		self.egress_window = None
		self.egress_window_x = 0
		self.egress_window_y = 0
		self.threshold = threshold
		self._init_curses()
		self.create_windows(height, width)

	def _init_curses(self):
		curses.initscr()
		curses.start_color()
		curses.init_pair(1, curses.COLOR_RED, curses.COLOR_BLACK)
		curses.noecho()
		curses.cbreak()
		curses.curs_set(0)

	def _print_window_data(self, window, packet_list, display_height, display_width):
		while len(packet_list) > display_height: packet_list.pop(0)

		line = 1
		for entry in packet_list:
			threshold_flag = False
			if entry['address'] is not '':
				print_line = "%s {" % (entry['address'])
				port_list = sorted(entry['ports'].iteritems(), key=operator.itemgetter(1), reverse=True)
				for port in port_list:
					print_line = print_line + " %d:%d " % (int(port[0]), int(port[1]))
					if port[1] > self.threshold:
						threshold_flag = True
				print_line = print_line + "}"

				while len(print_line) < display_width:
					print_line = print_line + " "

				if len(print_line) > display_width:
					count = len(entry['ports'])
					if count > self.threshold:
						threshold_flag = True
					print_line = print_line[:display_width - 9]
					print_line = print_line + " [%d]}" % count

				if threshold_flag == True:
					window.addstr(line, 1, "%s" % print_line, curses.A_BOLD | curses.color_pair(1))
				else:
					window.addstr(line, 1, "%s" % print_line)

				line += 1
		window.refresh()
		time.sleep(.05)

	def create_windows(self, height, width):
		self.ingress_window = curses.newwin(height, width / 2, 0, 0)
		self.ingress_window.box(0, 1)
		self.ingress_window_y, self.ingress_window_x = self.get_window_size(self.ingress_window)
		self.egress_window = curses.newwin(height, width / 2, 0, width / 2)
		self.egress_window.box(0, 1)
		self.egress_window_y, self.egress_window_x = self.get_window_size(self.egress_window)
		self.set_titles()

	def set_titles(self):
		self.ingress_window.addstr(0, 2, "Possible Malicious Ingress", curses.A_BOLD | curses.A_UNDERLINE)
		self.egress_window.addstr(0, 2, "Possible Malicious Egress", curses.A_BOLD | curses.A_UNDERLINE)
		self.ingress_window.refresh()
		self.egress_window.refresh()

	def get_window_size(self, window):
		y,x = window.getmaxyx()
		# -2 to account for window borders
		y -= 2
		x -= 2
		return y,x

	def print_data(self, ingress_data, egress_data):
		self._print_window_data(self.ingress_window, ingress_data, self.ingress_window_y, self.ingress_window_x)
		self._print_window_data(self.egress_window, egress_data, self.egress_window_y, self.egress_window_x)

	def exit(self):
		curses.endwin()

	def stop():
		self.exit()
		self.kill()

class Monitor_Thread():
	def __init__(self, options):
		self.address = options.address
		self.ports = self.parse_ports(options.ports)
		self.ingress_packets = self._init_packet_list()
		self.egress_packets = self._init_packet_list()
		self.packet_list_lock = threading.Lock()

	def _init_packet_list(self):
		return [{'address' : '', 'ports':{}}]

	def start_thread(self):
		sniff_thread = threading.Thread(target=self.start_sniffer)
		sniff_thread.setDaemon(True)
		sniff_thread.start()

	def start_sniffer(self):
		sniff(filter="tcp or udp", count=0, prn=self.process_packet)

	def parse_ports(self, port_options):
		port_array = []
		ports = None

		ports = port_options.split(',')
		for p in ports:
			if "-" in p:
				start,end = p.split("-")
				r = range(int(start), int(end) + 1)
				for port in r:
					port_array.append(port)
			else:
				port_array.append(int(p))

		return port_array

	def process_packet(self, packet):
		global kill_event

		if kill_event.is_set(): sys.exit(0)

		src_addr = None
		dst_addr = None
		src_port = None
		dst_port = None
		proto = None

		if IP in packet:
			src_addr = packet[IP].src
			dst_addr = packet[IP].dst
		else: return

		if TCP in packet:
			proto = "TCP"
			src_port = packet[TCP].sport
			dst_port = packet[TCP].dport
		if src_port is None or dst_port is None: return

		if UDP in packet:
			proto = "UDP"
			src_port = packet[UDP].sport
			dst_port = packet[UDP].dport
		if proto is None: return

		if self.address in src_addr:
			self._process_packet(dst_addr, src_port, self.egress_packets)

		if self.address in dst_addr:
			self._process_packet(src_addr, dst_port, self.ingress_packets)

	def _process_packet(self, address, port, packet_list):
		found = 0
		if port not in self.ports:
			self.packet_list_lock.acquire()
			for entry in packet_list:
				if address in entry['address']:
					for p in entry['ports']:
						if p == int(port):
							entry['ports'][p] += 1
							found = 1
					if found == 0:
						entry['ports'][int(port)] = 1
						found = 1
			if found == 0:
				packet_list.append({'address' : address, 'ports' : { int(port) : 1 } })
			self.packet_list_lock.release()

def signal_handler(signum, frame):
	global kill_event
	kill_event.set()


'''
determine the size of the console window
'''
def get_console_size():
	data = struct.pack("HH", 0, 0)
	file_no = sys.stdout.fileno()
	res = fcntl.ioctl(file_no, termios.TIOCGWINSZ, data)

	(height,width) = struct.unpack("HH", res)

	if width < 80 or height < 20:
		print "Error: Terminal size too small, needs to be at least 80x20!"
		print "Terminal size: %dx%d" % (width, height)
		sys.exit(-1)

	return (height, width)



def get_options():
	usage = "Usage: %prog -a <address> -p <ports> -t <threshold>\nFor help run %prog -h"
	parser = OptionParser(usage)
	group = OptionGroup(parser, "Required Options")
	group.add_option("-a", "--address", action="store", type="string", dest="address", \
		help="IP address to monitor. [REQUIRED]")
	group.add_option("-p", "--ports", action="store", type="string", dest="ports", 	\
		help="Ports that are acceptable to send/receive traffic on. [REQUIRED]")
	group.add_option("-t", "--threshold", action="store", type="int", dest="threshold",\
		help="Re-color display once the specified number of packets is sent/received on same socket. [REQUIRED]")
	parser.add_option_group(group)

	(options,args) = parser.parse_args()

	if options.address is None or options.ports is None or options.threshold is None:
		parser.print_usage()
		sys.exit(-1)
	else:
		return options


def main():
	global kill_event
	kill_event = threading.Event()
	signal.signal(signal.SIGINT, signal_handler)

	options = get_options()
	height, width = get_console_size()

	monitor = Monitor_Thread(options)
	monitor.start_thread()

	screen = Display_Screen(height, width, options.threshold)

	# main display loop, print contents of traffic logged
	while not kill_event.is_set():
		monitor.packet_list_lock.acquire()
		screen.print_data(monitor.ingress_packets, monitor.egress_packets)
		#ingress_list = deepcopy(monitor.ingress_packets)
		#egress_list = deepcopy(monitor.egress_packets)
		monitor.packet_list_lock.release()

		#screen.print_data(ingress_list, egress_list)
		#del(ingress_list)
		#del(egress_list)
		time.sleep(.1)

	screen.exit()

if __name__ == "__main__":
	main()
